diff --git a/components/newlib/stdatomic.c b/components/newlib/stdatomic.c
index b54d1b5884..1e83535db9 100644
--- a/components/newlib/stdatomic.c
+++ b/components/newlib/stdatomic.c
@@ -200,7 +200,7 @@ CLANG_DECLARE_ALIAS( __sync_bool_compare_and_swap_ ## n )
 }                                                                                \
 CLANG_DECLARE_ALIAS( __sync_val_compare_and_swap_ ## n )

-#define SYNC_LOCK_TEST_AND_SET(n, type) type  CLANG_ATOMIC_SUFFIX(__sync_lock_test_and_set_ ## n)  (type *ptr, type val, ...) \
+#define SYNC_LOCK_TEST_AND_SET(n, type) type  CLANG_ATOMIC_SUFFIX(__sync_lock_test_and_set_ ## n)  (type *ptr, type val) \
 {                                                                                \
     unsigned state = _ATOMIC_ENTER_CRITICAL();                                   \
     type ret = *ptr;                                                             \
@@ -210,7 +210,7 @@ CLANG_DECLARE_ALIAS( __sync_val_compare_and_swap_ ## n )
 }
 CLANG_DECLARE_ALIAS( __sync_lock_test_and_set_ ## n )

-#define SYNC_LOCK_RELEASE(n, type) void  CLANG_ATOMIC_SUFFIX(__sync_lock_release_ ## n)  (type *ptr, ...) \
+#define SYNC_LOCK_RELEASE(n, type) void  CLANG_ATOMIC_SUFFIX(__sync_lock_release_ ## n)  (type *ptr) \
 {                                                                                \
     unsigned state = _ATOMIC_ENTER_CRITICAL();                                   \
     *ptr = 0;                                                                    \
@@ -221,6 +221,14 @@ CLANG_DECLARE_ALIAS( __sync_lock_release_ ## n )

 #if !HAS_ATOMICS_32

+ATOMIC_LOAD(1, uint8_t)
+ATOMIC_LOAD(2, uint16_t)
+ATOMIC_LOAD(4, uint32_t)
+
+ATOMIC_STORE(1, uint8_t)
+ATOMIC_STORE(2, uint16_t)
+ATOMIC_STORE(4, uint32_t)
+
 ATOMIC_EXCHANGE(1, uint8_t)
 ATOMIC_EXCHANGE(2, uint16_t)
 ATOMIC_EXCHANGE(4, uint32_t)
@@ -277,17 +285,6 @@ SYNC_VAL_CMP_EXCHANGE(1, uint8_t)
 SYNC_VAL_CMP_EXCHANGE(2, uint16_t)
 SYNC_VAL_CMP_EXCHANGE(4, uint32_t)

-#ifdef __clang__
-
-// LLVM has not implemented native atomic load/stores for riscv targets without the Atomic extension
-// therfore we provide libcalls here when building with the clang toolchain. LLVM thread: https://reviews.llvm.org/D47553.
-ATOMIC_LOAD(1, uint8_t)
-ATOMIC_LOAD(2, uint16_t)
-ATOMIC_LOAD(4, uint32_t)
-ATOMIC_STORE(1, uint8_t)
-ATOMIC_STORE(2, uint16_t)
-ATOMIC_STORE(4, uint32_t)
-
 SYNC_LOCK_TEST_AND_SET(1, uint8_t)
 SYNC_LOCK_TEST_AND_SET(2, uint16_t)
 SYNC_LOCK_TEST_AND_SET(4, uint32_t)
@@ -296,8 +293,6 @@ SYNC_LOCK_RELEASE(1, uint8_t)
 SYNC_LOCK_RELEASE(2, uint16_t)
 SYNC_LOCK_RELEASE(4, uint32_t)

-#endif
-
 #endif // !HAS_ATOMICS_32

 #if !HAS_ATOMICS_64
@@ -334,11 +329,8 @@ SYNC_BOOL_CMP_EXCHANGE(8, uint64_t)

 SYNC_VAL_CMP_EXCHANGE(8, uint64_t)

-#ifdef __clang__
-
 SYNC_LOCK_TEST_AND_SET(8, uint64_t)
-SYNC_LOCK_RELEASE(8, uint64_t)

-#endif
+SYNC_LOCK_RELEASE(8, uint64_t)

 #endif // !HAS_ATOMICS_64
