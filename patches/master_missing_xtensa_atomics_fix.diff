diff --git a/components/newlib/stdatomic.c b/components/newlib/stdatomic.c
index bbd2d17e80..634206ae37 100644
--- a/components/newlib/stdatomic.c
+++ b/components/newlib/stdatomic.c
@@ -208,9 +208,34 @@ CLANG_DECLARE_ALIAS( __sync_bool_compare_and_swap_ ## n )
 }                                                                                \
 CLANG_DECLARE_ALIAS( __sync_val_compare_and_swap_ ## n )

+#define SYNC_LOCK_TEST_AND_SET(n, type) type  CLANG_ATOMIC_SUFFIX(__sync_lock_test_and_set_ ## n)  (type *ptr, type val, ...) \
+{                                                                                \
+    unsigned state = _ATOMIC_ENTER_CRITICAL();                                   \
+    type ret = *ptr;                                                             \
+    *ptr = val;                                                                  \
+    _ATOMIC_EXIT_CRITICAL(state);                                                \
+    return ret;                                                                  \
+}
+CLANG_DECLARE_ALIAS( __sync_lock_test_and_set_ ## n )
+
+#define SYNC_LOCK_RELEASE(n, type) void  CLANG_ATOMIC_SUFFIX(__sync_lock_release_ ## n)  (type *ptr, ...) \
+{                                                                                \
+    unsigned state = _ATOMIC_ENTER_CRITICAL();                                   \
+    *ptr = 0;                                                                    \
+    _ATOMIC_EXIT_CRITICAL(state);                                                \
+}
+CLANG_DECLARE_ALIAS( __sync_lock_release_ ## n )

 #if !HAS_ATOMICS_32

+ATOMIC_LOAD(1, uint8_t)
+ATOMIC_LOAD(2, uint16_t)
+ATOMIC_LOAD(4, uint32_t)
+
+ATOMIC_STORE(1, uint8_t)
+ATOMIC_STORE(2, uint16_t)
+ATOMIC_STORE(4, uint32_t)
+
 ATOMIC_EXCHANGE(1, uint8_t)
 ATOMIC_EXCHANGE(2, uint16_t)
 ATOMIC_EXCHANGE(4, uint32_t)
@@ -267,6 +292,14 @@ SYNC_VAL_CMP_EXCHANGE(1, uint8_t)
 SYNC_VAL_CMP_EXCHANGE(2, uint16_t)
 SYNC_VAL_CMP_EXCHANGE(4, uint32_t)

+SYNC_LOCK_TEST_AND_SET(1, uint8_t)
+SYNC_LOCK_TEST_AND_SET(2, uint16_t)
+SYNC_LOCK_TEST_AND_SET(4, uint32_t)
+
+SYNC_LOCK_RELEASE(1, uint8_t)
+SYNC_LOCK_RELEASE(2, uint16_t)
+SYNC_LOCK_RELEASE(4, uint32_t)
+
 #endif // !HAS_ATOMICS_32

 #if !HAS_ATOMICS_64
@@ -303,4 +336,8 @@ SYNC_BOOL_CMP_EXCHANGE(8, uint64_t)

 SYNC_VAL_CMP_EXCHANGE(8, uint64_t)

+SYNC_LOCK_TEST_AND_SET(8, uint64_t)
+
+SYNC_LOCK_RELEASE(8, uint64_t)
+
 #endif // !HAS_ATOMICS_64
